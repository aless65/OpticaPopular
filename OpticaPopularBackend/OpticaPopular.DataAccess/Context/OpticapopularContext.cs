// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using OpticaPopular.Entities.Entities;

#nullable disable

namespace OpticaPopular.DataAccess.Context
{
    public partial class OpticapopularContext : DbContext
    {
        public OpticapopularContext()
        {
        }

        public OpticapopularContext(DbContextOptions<OpticapopularContext> options)
            : base(options)
        {
        }

        public virtual DbSet<VW_tbUsuarios> VW_tbUsuarios { get; set; }
        public virtual DbSet<tbAros> tbAros { get; set; }
        public virtual DbSet<tbCargos> tbCargos { get; set; }
        public virtual DbSet<tbCategorias> tbCategorias { get; set; }
        public virtual DbSet<tbCitas> tbCitas { get; set; }
        public virtual DbSet<tbClientes> tbClientes { get; set; }
        public virtual DbSet<tbConsultorios> tbConsultorios { get; set; }
        public virtual DbSet<tbDepartamentos> tbDepartamentos { get; set; }
        public virtual DbSet<tbDetallesCitas> tbDetallesCitas { get; set; }
        public virtual DbSet<tbDetallesEnvios> tbDetallesEnvios { get; set; }
        public virtual DbSet<tbDetallesOrdenes> tbDetallesOrdenes { get; set; }
        public virtual DbSet<tbDirecciones> tbDirecciones { get; set; }
        public virtual DbSet<tbDireccionesPorCliente> tbDireccionesPorCliente { get; set; }
        public virtual DbSet<tbEmpleados> tbEmpleados { get; set; }
        public virtual DbSet<tbEnvios> tbEnvios { get; set; }
        public virtual DbSet<tbEstadosCiviles> tbEstadosCiviles { get; set; }
        public virtual DbSet<tbFacturas> tbFacturas { get; set; }
        public virtual DbSet<tbFacturasDetalles> tbFacturasDetalles { get; set; }
        public virtual DbSet<tbMarcas> tbMarcas { get; set; }
        public virtual DbSet<tbMetodosPago> tbMetodosPago { get; set; }
        public virtual DbSet<tbMunicipios> tbMunicipios { get; set; }
        public virtual DbSet<tbOrdenes> tbOrdenes { get; set; }
        public virtual DbSet<tbPantallas> tbPantallas { get; set; }
        public virtual DbSet<tbPantallasPorRoles> tbPantallasPorRoles { get; set; }
        public virtual DbSet<tbProveedores> tbProveedores { get; set; }
        public virtual DbSet<tbRoles> tbRoles { get; set; }
        public virtual DbSet<tbSucursales> tbSucursales { get; set; }
        public virtual DbSet<tbUsuarios> tbUsuarios { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<VW_tbUsuarios>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("VW_tbUsuarios", "acce");

                entity.Property(e => e.empe_NombreCompleto).HasMaxLength(201);

                entity.Property(e => e.role_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_Contrasena).IsRequired();

                entity.Property(e => e.user_FechaCreacion).HasColumnType("datetime");

                entity.Property(e => e.user_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.user_NombreUsuario)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_UsuCreacion_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.user_UsuModificacion_Nombre).HasMaxLength(100);
            });

            modelBuilder.Entity<tbAros>(entity =>
            {
                entity.HasKey(e => e.aros_Id)
                    .HasName("PK_opti_tbAros_aros_Id");

                entity.ToTable("tbAros", "opti");

                entity.Property(e => e.aros_CostoUni).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.aros_Descripcion)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.aros_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.aros_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.aros_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.aros_UsuCreacionNavigation)
                    .WithMany(p => p.tbArosaros_UsuCreacionNavigation)
                    .HasForeignKey(d => d.aros_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbAros_acce_tbUsuarios_clie_UsuCreacion_user_Id");

                entity.HasOne(d => d.aros_UsuModificacionNavigation)
                    .WithMany(p => p.tbArosaros_UsuModificacionNavigation)
                    .HasForeignKey(d => d.aros_UsuModificacion)
                    .HasConstraintName("FK_opti_tbAros_acce_tbUsuarios_clie_UsuModificacion_user_Id");

                entity.HasOne(d => d.cate)
                    .WithMany(p => p.tbAros)
                    .HasForeignKey(d => d.cate_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbAros_opti_tbCategorias_cate_Id");

                entity.HasOne(d => d.prov)
                    .WithMany(p => p.tbAros)
                    .HasForeignKey(d => d.prov_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbAros_opti_tbProveedores_prov_Id");
            });

            modelBuilder.Entity<tbCargos>(entity =>
            {
                entity.HasKey(e => e.carg_Id)
                    .HasName("PK_opti_tbCargos_carg_Id");

                entity.ToTable("tbCargos", "opti");

                entity.Property(e => e.carg_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.carg_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.carg_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.carg_Nombre)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.HasOne(d => d.usua_IdCreacionNavigation)
                    .WithMany(p => p.tbCargosusua_IdCreacionNavigation)
                    .HasForeignKey(d => d.usua_IdCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbCargos_usua_IdCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_IdModificacionNavigation)
                    .WithMany(p => p.tbCargosusua_IdModificacionNavigation)
                    .HasForeignKey(d => d.usua_IdModificacion)
                    .HasConstraintName("FK_opti_tbCargos_usua_IdModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbCategorias>(entity =>
            {
                entity.HasKey(e => e.cate_Id)
                    .HasName("PK_opti_tbCategorias_cate_Id");

                entity.ToTable("tbCategorias", "opti");

                entity.HasIndex(e => e.cate_Nombre, "UQ_opti_tbCategorias_cate_Nombre")
                    .IsUnique();

                entity.Property(e => e.cate_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.cate_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.cate_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.cate_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.cate_UsuCreacionNavigation)
                    .WithMany(p => p.tbCategoriascate_UsuCreacionNavigation)
                    .HasForeignKey(d => d.cate_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbCategorias_acce_tbUsuarios_cate_UsuCreacion_user_Id");

                entity.HasOne(d => d.cate_UsuModificacionNavigation)
                    .WithMany(p => p.tbCategoriascate_UsuModificacionNavigation)
                    .HasForeignKey(d => d.cate_UsuModificacion)
                    .HasConstraintName("FK_opti_tbCategorias_acce_tbUsuarios_cate_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbCitas>(entity =>
            {
                entity.HasKey(e => e.cita_Id)
                    .HasName("PK_opti_tbCitas_cita_Id");

                entity.ToTable("tbCitas", "opti");

                entity.Property(e => e.cita_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.cita_Fecha).HasColumnType("date");

                entity.Property(e => e.cita_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.cita_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.clie)
                    .WithMany(p => p.tbCitas)
                    .HasForeignKey(d => d.clie_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbCitas_cita_Id_opti_tbClientes_clie_Id");

                entity.HasOne(d => d.cons)
                    .WithMany(p => p.tbCitas)
                    .HasForeignKey(d => d.cons_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbCitas_cons_Id_opti_tbConsultorios_cons_Id");

                entity.HasOne(d => d.usua_IdCreacionNavigation)
                    .WithMany(p => p.tbCitasusua_IdCreacionNavigation)
                    .HasForeignKey(d => d.usua_IdCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbCitas_usua_IdCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_IdModificacionNavigation)
                    .WithMany(p => p.tbCitasusua_IdModificacionNavigation)
                    .HasForeignKey(d => d.usua_IdModificacion)
                    .HasConstraintName("FK_opti_tbCitas_usua_IdModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbClientes>(entity =>
            {
                entity.HasKey(e => e.clie_Id)
                    .HasName("PK_opti_tbClientes_clie_Id");

                entity.ToTable("tbClientes", "opti");

                entity.Property(e => e.clie_Apellidos)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.clie_CorreoElectronico)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.Property(e => e.clie_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.clie_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.clie_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.clie_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.clie_Identidad)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.clie_Nombres)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.clie_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.clie_Telefono)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.HasOne(d => d.clie_UsuCreacionNavigation)
                    .WithMany(p => p.tbClientesclie_UsuCreacionNavigation)
                    .HasForeignKey(d => d.clie_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbClientes_acce_tbUsuarios_clie_UsuCreacion_user_Id");

                entity.HasOne(d => d.clie_UsuModificacionNavigation)
                    .WithMany(p => p.tbClientesclie_UsuModificacionNavigation)
                    .HasForeignKey(d => d.clie_UsuModificacion)
                    .HasConstraintName("FK_opti_tbClientes_acce_tbUsuarios_clie_UsuModificacion_user_Id");

                entity.HasOne(d => d.estacivi)
                    .WithMany(p => p.tbClientes)
                    .HasForeignKey(d => d.estacivi_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbClientes_gral_tbEstadosCiviles_estacivi_Id");
            });

            modelBuilder.Entity<tbConsultorios>(entity =>
            {
                entity.HasKey(e => e.cons_Id)
                    .HasName("PK_opti_tbConsultorios_cons_Id");

                entity.ToTable("tbConsultorios", "opti");

                entity.Property(e => e.cons_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.cons_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.cons_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.cons_Nombre)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.HasOne(d => d.empe)
                    .WithMany(p => p.tbConsultorios)
                    .HasForeignKey(d => d.empe_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbConsultorios_empe_Id_opti_tbEmpleados_empe_Id");

                entity.HasOne(d => d.usua_IdCreacionNavigation)
                    .WithMany(p => p.tbConsultoriosusua_IdCreacionNavigation)
                    .HasForeignKey(d => d.usua_IdCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbConsultorios_usua_IdCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_IdModificacionNavigation)
                    .WithMany(p => p.tbConsultoriosusua_IdModificacionNavigation)
                    .HasForeignKey(d => d.usua_IdModificacion)
                    .HasConstraintName("FK_opti_tbConsultorios_usua_IdModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbDepartamentos>(entity =>
            {
                entity.HasKey(e => e.depa_Id)
                    .HasName("PK_gral_tbDepartamentos_depa_Id");

                entity.ToTable("tbDepartamentos", "gral");

                entity.Property(e => e.depa_Id)
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.depa_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.depa_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.depa_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.depa_UsuCreacionNavigation)
                    .WithMany(p => p.tbDepartamentosdepa_UsuCreacionNavigation)
                    .HasForeignKey(d => d.depa_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbDepartamentos_acce_tbUsuarios_depa_UsuCreacion_user_Id");

                entity.HasOne(d => d.depa_UsuModificacionNavigation)
                    .WithMany(p => p.tbDepartamentosdepa_UsuModificacionNavigation)
                    .HasForeignKey(d => d.depa_UsuModificacion)
                    .HasConstraintName("FK_gral_tbDepartamentos_acce_tbUsuarios_depa_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbDetallesCitas>(entity =>
            {
                entity.HasKey(e => e.deci_Id)
                    .HasName("PK_opti_tbDetallesCitas_");

                entity.ToTable("tbDetallesCitas", "opti");

                entity.Property(e => e.deci_Costo).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.deci_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.deci_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.deci_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.deci_HoraFin)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.Property(e => e.deci_HoraInicio)
                    .IsRequired()
                    .HasMaxLength(5)
                    .IsUnicode(false);

                entity.HasOne(d => d.cita)
                    .WithMany(p => p.tbDetallesCitas)
                    .HasForeignKey(d => d.cita_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbDetallesCitas_cita_Id_opti_tbCitas_cita_Id");

                entity.HasOne(d => d.usua_IdCreacionNavigation)
                    .WithMany(p => p.tbDetallesCitasusua_IdCreacionNavigation)
                    .HasForeignKey(d => d.usua_IdCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbDetallesCitas_usua_IdCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_IdModificacionNavigation)
                    .WithMany(p => p.tbDetallesCitasusua_IdModificacionNavigation)
                    .HasForeignKey(d => d.usua_IdModificacion)
                    .HasConstraintName("FK_opti_tbDetallesCitas_usua_IdModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbDetallesEnvios>(entity =>
            {
                entity.HasKey(e => e.deen_Id)
                    .HasName("PK_opti_tbDetallesEnvios_deen_Id");

                entity.ToTable("tbDetallesEnvios", "opti");

                entity.Property(e => e.clie_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.clie_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.clie_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.envi)
                    .WithMany(p => p.tbDetallesEnvios)
                    .HasForeignKey(d => d.envi_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbDetallesEnvios_envi_Id_opti_tbEnvios_envi_Id");

                entity.HasOne(d => d.orde)
                    .WithMany(p => p.tbDetallesEnvios)
                    .HasForeignKey(d => d.orde_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbDetallesEnvios_orde_Id_opti_tbOrdenes_orde_Id");

                entity.HasOne(d => d.usua_IdCreacionNavigation)
                    .WithMany(p => p.tbDetallesEnviosusua_IdCreacionNavigation)
                    .HasForeignKey(d => d.usua_IdCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbDetallesEnvios_usua_IdCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_IdModificacionNavigation)
                    .WithMany(p => p.tbDetallesEnviosusua_IdModificacionNavigation)
                    .HasForeignKey(d => d.usua_IdModificacion)
                    .HasConstraintName("FK_opti_tbDetallesEnvios_usua_IdModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbDetallesOrdenes>(entity =>
            {
                entity.HasKey(e => e.deor_Id)
                    .HasName("PK_opti_tbDetallesOrdenes_deor_Id");

                entity.ToTable("tbDetallesOrdenes", "opti");

                entity.Property(e => e.deor_GraduacionLeft)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.deor_GraduacionRight)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.deor_Precio).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.deor_Total).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.orde_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.orde_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.orde_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.aros)
                    .WithMany(p => p.tbDetallesOrdenes)
                    .HasForeignKey(d => d.aros_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbDetallesOrdenes_aros_Id_opti_tbAros_aros_Id");

                entity.HasOne(d => d.orde)
                    .WithMany(p => p.tbDetallesOrdenes)
                    .HasForeignKey(d => d.orde_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbDetallesOrdenes_orde_Id_opti_tbOrdenes_orde_Id");

                entity.HasOne(d => d.usua_IdCreacionNavigation)
                    .WithMany(p => p.tbDetallesOrdenesusua_IdCreacionNavigation)
                    .HasForeignKey(d => d.usua_IdCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbDetallesOrdenes_usua_IdCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_IdModificacionNavigation)
                    .WithMany(p => p.tbDetallesOrdenesusua_IdModificacionNavigation)
                    .HasForeignKey(d => d.usua_IdModificacion)
                    .HasConstraintName("FK_opti_tbDetallesOrdenes_usua_IdModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbDirecciones>(entity =>
            {
                entity.HasKey(e => e.dire_Id)
                    .HasName("PK_tbDirecciones_dire_Id");

                entity.ToTable("tbDirecciones", "opti");

                entity.Property(e => e.clie_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.clie_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.clie_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.dire_DireccionExacta).IsRequired();

                entity.Property(e => e.muni_Id)
                    .IsRequired()
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbDirecciones)
                    .HasForeignKey(d => d.muni_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_tbDirecciones_muni_Id_tbMunicipios_muni_Id");

                entity.HasOne(d => d.usua_IdCreacionNavigation)
                    .WithMany(p => p.tbDireccionesusua_IdCreacionNavigation)
                    .HasForeignKey(d => d.usua_IdCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbDirecciones_usua_IdCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_IdModificacionNavigation)
                    .WithMany(p => p.tbDireccionesusua_IdModificacionNavigation)
                    .HasForeignKey(d => d.usua_IdModificacion)
                    .HasConstraintName("FK_opti_tbDirecciones_usua_IdModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbDireccionesPorCliente>(entity =>
            {
                entity.HasKey(e => e.dicl_Id)
                    .HasName("PK_opti_tbDireccionesPorCliente_dicl_Id");

                entity.ToTable("tbDireccionesPorCliente", "opti");

                entity.Property(e => e.clie_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.clie_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.clie_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.clie)
                    .WithMany(p => p.tbDireccionesPorCliente)
                    .HasForeignKey(d => d.clie_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbDireccionesPorCliente_clie_Id_opti_tbClientes_clie_Id");

                entity.HasOne(d => d.dire)
                    .WithMany(p => p.tbDireccionesPorCliente)
                    .HasForeignKey(d => d.dire_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbDireccionesPorCliente_dire_Id_opti_tbDirecciones_dire_Id");

                entity.HasOne(d => d.usua_IdCreacionNavigation)
                    .WithMany(p => p.tbDireccionesPorClienteusua_IdCreacionNavigation)
                    .HasForeignKey(d => d.usua_IdCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbDireccionesPorCliente_usua_IdCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_IdModificacionNavigation)
                    .WithMany(p => p.tbDireccionesPorClienteusua_IdModificacionNavigation)
                    .HasForeignKey(d => d.usua_IdModificacion)
                    .HasConstraintName("FK_opti_tbDireccionesPorCliente_usua_IdModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbEmpleados>(entity =>
            {
                entity.HasKey(e => e.empe_Id)
                    .HasName("PK_opti_tbEmpleados_empe_Id");

                entity.ToTable("tbEmpleados", "opti");

                entity.Property(e => e.empe_Apellidos)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.empe_CorreoElectronico)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.empe_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.empe_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.empe_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.empe_FechaNacimiento).HasColumnType("date");

                entity.Property(e => e.empe_Identidad)
                    .IsRequired()
                    .HasMaxLength(13)
                    .IsUnicode(false);

                entity.Property(e => e.empe_Nombres)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.empe_Salario).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.empe_Sexo)
                    .IsRequired()
                    .HasMaxLength(1)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.empe_Telefono)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.HasOne(d => d.carg)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.carg_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbEmpleados_opti_tbCargos_carg_Id");

                entity.HasOne(d => d.empe_UsuCreacionNavigation)
                    .WithMany(p => p.tbEmpleadosempe_UsuCreacionNavigation)
                    .HasForeignKey(d => d.empe_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbEmpleados_acce_tbUsuarios_UserCreate");

                entity.HasOne(d => d.empe_UsuModificacionNavigation)
                    .WithMany(p => p.tbEmpleadosempe_UsuModificacionNavigation)
                    .HasForeignKey(d => d.empe_UsuModificacion)
                    .HasConstraintName("FK_opti_tbEmpleados_acce_tbUsuarios_UserUpdate");

                entity.HasOne(d => d.estacivi)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.estacivi_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbEmpleados_gral_tbEstadosCiviles_estacivi_Id");

                entity.HasOne(d => d.sucu)
                    .WithMany(p => p.tbEmpleados)
                    .HasForeignKey(d => d.sucu_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbEmpleados_opti_tbSucursales_sucu_Id");
            });

            modelBuilder.Entity<tbEnvios>(entity =>
            {
                entity.HasKey(e => e.envi_Id)
                    .HasName("PK_opti_tbEnvios_envi_Id");

                entity.ToTable("tbEnvios", "opti");

                entity.Property(e => e.clie_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.clie_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.clie_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.envi_Fecha)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.envi_FechaEntrega).HasColumnType("date");

                entity.Property(e => e.envi_FechaEntregaReal).HasColumnType("date");

                entity.HasOne(d => d.clie)
                    .WithMany(p => p.tbEnvios)
                    .HasForeignKey(d => d.clie_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbEnvios_clie_Id_opti_tbClientes_clie_Id");

                entity.HasOne(d => d.dire)
                    .WithMany(p => p.tbEnvios)
                    .HasForeignKey(d => d.dire_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbDirecciones_dire_Id_opti_tbDirecciones_dire_Id");

                entity.HasOne(d => d.usua_IdCreacionNavigation)
                    .WithMany(p => p.tbEnviosusua_IdCreacionNavigation)
                    .HasForeignKey(d => d.usua_IdCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbEnvios_usua_IdCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_IdModificacionNavigation)
                    .WithMany(p => p.tbEnviosusua_IdModificacionNavigation)
                    .HasForeignKey(d => d.usua_IdModificacion)
                    .HasConstraintName("FK_opti_tbEnvios_usua_IdModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbEstadosCiviles>(entity =>
            {
                entity.HasKey(e => e.estacivi_Id)
                    .HasName("PK_gral_tbEstadosCiviles");

                entity.ToTable("tbEstadosCiviles", "gral");

                entity.Property(e => e.estacivi_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.estacivi_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.estacivi_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.estacivi_Nombre).HasMaxLength(50);

                entity.HasOne(d => d.estacivi_UsuCreacionNavigation)
                    .WithMany(p => p.tbEstadosCivilesestacivi_UsuCreacionNavigation)
                    .HasForeignKey(d => d.estacivi_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbEstadosCiviles_acce_tbUsuarios_estacivi_UsuCreacion_user_Id");

                entity.HasOne(d => d.estacivi_UsuModificacionNavigation)
                    .WithMany(p => p.tbEstadosCivilesestacivi_UsuModificacionNavigation)
                    .HasForeignKey(d => d.estacivi_UsuModificacion)
                    .HasConstraintName("FK_gral_tbEstadosCiviles_acce_tbUsuarios_estacivi_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbFacturas>(entity =>
            {
                entity.HasKey(e => e.fact_Id)
                    .HasName("PK_opti_tbFacturas_fact_Id");

                entity.ToTable("tbFacturas", "opti");

                entity.Property(e => e.fact_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.fact_Fecha).HasColumnType("datetime");

                entity.Property(e => e.fact_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.fact_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.fact_PrecioTotal).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.clie)
                    .WithMany(p => p.tbFacturas)
                    .HasForeignKey(d => d.clie_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbFacturas_opti_tbClientes_clie_Id");

                entity.HasOne(d => d.empe)
                    .WithMany(p => p.tbFacturas)
                    .HasForeignKey(d => d.empe_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbFacturas_opti_tbEmpleados_empe_Id");

                entity.HasOne(d => d.fact_UsuCreacionNavigation)
                    .WithMany(p => p.tbFacturasfact_UsuCreacionNavigation)
                    .HasForeignKey(d => d.fact_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbFacturas_acce_tbUsuarios_fact_UsuCreacion_user_Id");

                entity.HasOne(d => d.fact_UsuModificacionNavigation)
                    .WithMany(p => p.tbFacturasfact_UsuModificacionNavigation)
                    .HasForeignKey(d => d.fact_UsuModificacion)
                    .HasConstraintName("FK_opti_tbFacturas_acce_tbUsuarios_fact_UsuModificacion_user_Id");

                entity.HasOne(d => d.meto)
                    .WithMany(p => p.tbFacturas)
                    .HasForeignKey(d => d.meto_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbFacturas_opti_tbMetodosPago_meto_Id");
            });

            modelBuilder.Entity<tbFacturasDetalles>(entity =>
            {
                entity.HasKey(e => e.factdeta_Id)
                    .HasName("PK_opti_tbFacturasDetalles_factdeta_Id");

                entity.ToTable("tbFacturasDetalles", "opti");

                entity.Property(e => e.factdeta_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.factdeta_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.factdeta_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.factdeta_Precio).HasColumnType("decimal(18, 2)");

                entity.HasOne(d => d.aros)
                    .WithMany(p => p.tbFacturasDetalles)
                    .HasForeignKey(d => d.aros_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbFacturasDetalles_opti_tbAros_aros_Id");

                entity.HasOne(d => d.fact)
                    .WithMany(p => p.tbFacturasDetalles)
                    .HasForeignKey(d => d.fact_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbFacturasDetalles_opti_tbFacturas_fact_Id");

                entity.HasOne(d => d.factdeta_UsuCreacionNavigation)
                    .WithMany(p => p.tbFacturasDetallesfactdeta_UsuCreacionNavigation)
                    .HasForeignKey(d => d.factdeta_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbFacturasDetalles_acce_tbUsuarios_factdeta_UsuCreacion_user_Id");

                entity.HasOne(d => d.factdeta_UsuModificacionNavigation)
                    .WithMany(p => p.tbFacturasDetallesfactdeta_UsuModificacionNavigation)
                    .HasForeignKey(d => d.factdeta_UsuModificacion)
                    .HasConstraintName("FK_opti_tbFacturasDetalles_acce_tbUsuarios_factdeta_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbMarcas>(entity =>
            {
                entity.HasKey(e => e.marc_Id)
                    .HasName("PK_opti_tbMarcas_marc_Id");

                entity.ToTable("tbMarcas", "opti");

                entity.Property(e => e.marc_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.marc_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.marc_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.marc_Nombre)
                    .IsRequired()
                    .HasMaxLength(150);

                entity.HasOne(d => d.usua_IdCreacionNavigation)
                    .WithMany(p => p.tbMarcasusua_IdCreacionNavigation)
                    .HasForeignKey(d => d.usua_IdCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbMarcas_usua_IdCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_IdModificacionNavigation)
                    .WithMany(p => p.tbMarcasusua_IdModificacionNavigation)
                    .HasForeignKey(d => d.usua_IdModificacion)
                    .HasConstraintName("FK_opti_tbMarcas_usua_IdModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbMetodosPago>(entity =>
            {
                entity.HasKey(e => e.meto_Id)
                    .HasName("PK_opti_tbMetodosPago_meto_Id");

                entity.ToTable("tbMetodosPago", "opti");

                entity.Property(e => e.meto_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.meto_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.meto_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.meto_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.meto_UsuCreacionNavigation)
                    .WithMany(p => p.tbMetodosPagometo_UsuCreacionNavigation)
                    .HasForeignKey(d => d.meto_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbMetodosPago_acce_tbUsuarios_meto_UsuCreacion_user_Id");

                entity.HasOne(d => d.meto_UsuModificacionNavigation)
                    .WithMany(p => p.tbMetodosPagometo_UsuModificacionNavigation)
                    .HasForeignKey(d => d.meto_UsuModificacion)
                    .HasConstraintName("FK_opti_tbMetodosPago_acce_tbUsuarios_meto_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbMunicipios>(entity =>
            {
                entity.HasKey(e => e.muni_id)
                    .HasName("PK_gral_tbMunicipios_muni_Id");

                entity.ToTable("tbMunicipios", "gral");

                entity.Property(e => e.muni_id)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.depa_Id)
                    .IsRequired()
                    .HasMaxLength(2)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.muni_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.muni_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.muni_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.muni_Nombre)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.HasOne(d => d.depa)
                    .WithMany(p => p.tbMunicipios)
                    .HasForeignKey(d => d.depa_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbMunicipios_gral_tbDepartamentos_depa_Id");

                entity.HasOne(d => d.muni_UsuCreacionNavigation)
                    .WithMany(p => p.tbMunicipiosmuni_UsuCreacionNavigation)
                    .HasForeignKey(d => d.muni_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_gral_tbMunicipios_acce_tbUsuarios_muni_UsuCreacion_user_Id");

                entity.HasOne(d => d.muni_UsuModificacionNavigation)
                    .WithMany(p => p.tbMunicipiosmuni_UsuModificacionNavigation)
                    .HasForeignKey(d => d.muni_UsuModificacion)
                    .HasConstraintName("FK_gral_tbMunicipios_acce_tbUsuarios_muni_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbOrdenes>(entity =>
            {
                entity.HasKey(e => e.orde_Id)
                    .HasName("PK_opti_tbOrdenes_orde_Id");

                entity.ToTable("tbOrdenes", "opti");

                entity.Property(e => e.orde_Estado).HasDefaultValueSql("((1))");

                entity.Property(e => e.orde_Fecha)
                    .HasColumnType("date")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.orde_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.orde_FechaEntrega).HasColumnType("date");

                entity.Property(e => e.orde_FechaEntregaReal).HasColumnType("date");

                entity.Property(e => e.orde_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.clie)
                    .WithMany(p => p.tbOrdenes)
                    .HasForeignKey(d => d.clie_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbOrdenes_clie_Id_opti_tbClientes_clie_Id");

                entity.HasOne(d => d.sucu)
                    .WithMany(p => p.tbOrdenes)
                    .HasForeignKey(d => d.sucu_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbOrdenes_sucu_Id_opti_tbSucursales_sucu_Id");

                entity.HasOne(d => d.usua_IdCreacionNavigation)
                    .WithMany(p => p.tbOrdenesusua_IdCreacionNavigation)
                    .HasForeignKey(d => d.usua_IdCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbOrdenes_usua_IdCreacion_acce_tbUsuarios_usua_Id");

                entity.HasOne(d => d.usua_IdModificacionNavigation)
                    .WithMany(p => p.tbOrdenesusua_IdModificacionNavigation)
                    .HasForeignKey(d => d.usua_IdModificacion)
                    .HasConstraintName("FK_opti_tbOrdenes_usua_IdModificacion_acce_tbUsuarios_usua_Id");
            });

            modelBuilder.Entity<tbPantallas>(entity =>
            {
                entity.HasKey(e => e.pant_Id)
                    .HasName("PK_acce_tbPantallas_pant_Id");

                entity.ToTable("tbPantallas", "acce");

                entity.Property(e => e.pant_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.pant_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pant_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.pant_HtmlId)
                    .IsRequired()
                    .HasMaxLength(80);

                entity.Property(e => e.pant_Menu)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.pant_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.pant_Url)
                    .IsRequired()
                    .HasMaxLength(300);
            });

            modelBuilder.Entity<tbPantallasPorRoles>(entity =>
            {
                entity.HasKey(e => e.pantrole_Id)
                    .HasName("PK_acce_tbPantallasPorRoles_pantrole_Id");

                entity.ToTable("tbPantallasPorRoles", "acce");

                entity.Property(e => e.pantrole_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.pantrole_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.pantrole_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.pant)
                    .WithMany(p => p.tbPantallasPorRoles)
                    .HasForeignKey(d => d.pant_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbPantallas_pant_Id");

                entity.HasOne(d => d.pantrole_UsuCreacionNavigation)
                    .WithMany(p => p.tbPantallasPorRolespantrole_UsuCreacionNavigation)
                    .HasForeignKey(d => d.pantrole_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbUsuarios_pantrole_UsuCreacion_user_Id");

                entity.HasOne(d => d.pantrole_UsuModificacionNavigation)
                    .WithMany(p => p.tbPantallasPorRolespantrole_UsuModificacionNavigation)
                    .HasForeignKey(d => d.pantrole_UsuModificacion)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbUsuarios_pantrole_UsuModificacion_user_Id");

                entity.HasOne(d => d.role)
                    .WithMany(p => p.tbPantallasPorRoles)
                    .HasForeignKey(d => d.role_Id)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbPantallasPorRoles_acce_tbRoles_role_Id");
            });

            modelBuilder.Entity<tbProveedores>(entity =>
            {
                entity.HasKey(e => e.prov_Id)
                    .HasName("PK_opti_tbProveedores_prov_Id");

                entity.ToTable("tbProveedores", "opti");

                entity.Property(e => e.prov_CorreoElectronico)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.prov_Direccion)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.prov_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.prov_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.prov_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.prov_Nombre)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.prov_Telefono)
                    .IsRequired()
                    .HasMaxLength(15);

                entity.HasOne(d => d.prov_UsuCreacionNavigation)
                    .WithMany(p => p.tbProveedoresprov_UsuCreacionNavigation)
                    .HasForeignKey(d => d.prov_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_tbProveedores_acce_tbUsuarios_prov_UsuCreacion_user_Id");

                entity.HasOne(d => d.prov_UsuModificacionNavigation)
                    .WithMany(p => p.tbProveedoresprov_UsuModificacionNavigation)
                    .HasForeignKey(d => d.prov_UsuModificacion)
                    .HasConstraintName("FK_opti_tbProveedores_acce_tbUsuarios_prov_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbRoles>(entity =>
            {
                entity.HasKey(e => e.role_Id)
                    .HasName("PK_acce_tbRoles_role_Id");

                entity.ToTable("tbRoles", "acce");

                entity.Property(e => e.role_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.role_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.role_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.role_Nombre)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.role_UsuCreacionNavigation)
                    .WithMany(p => p.tbRolesrole_UsuCreacionNavigation)
                    .HasForeignKey(d => d.role_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_acce_tbRoles_acce_tbUsuarios_role_UsuCreacion_user_Id");

                entity.HasOne(d => d.role_UsuModificacionNavigation)
                    .WithMany(p => p.tbRolesrole_UsuModificacionNavigation)
                    .HasForeignKey(d => d.role_UsuModificacion)
                    .HasConstraintName("FK_acce_tbRoles_acce_tbUsuarios_role_UsuModificacion_user_Id");
            });

            modelBuilder.Entity<tbSucursales>(entity =>
            {
                entity.HasKey(e => e.sucu_Id)
                    .HasName("PK_opti_tbSucursales_sucu_Id");

                entity.ToTable("tbSucursales", "opti");

                entity.Property(e => e.muni_Id)
                    .HasMaxLength(4)
                    .IsUnicode(false)
                    .IsFixedLength(true);

                entity.Property(e => e.sucu_Descripcion)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.sucu_DireccionExacta)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.sucu_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.sucu_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.sucu_FechaModificacion).HasColumnType("datetime");

                entity.HasOne(d => d.muni)
                    .WithMany(p => p.tbSucursales)
                    .HasForeignKey(d => d.muni_Id)
                    .HasConstraintName("FK_opti_gral_tbSucursales_muni_Id");

                entity.HasOne(d => d.sucu_UsuCreacionNavigation)
                    .WithMany(p => p.tbSucursales)
                    .HasForeignKey(d => d.sucu_UsuCreacion)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_opti_acce_tbSucursales_user_Id");
            });

            modelBuilder.Entity<tbUsuarios>(entity =>
            {
                entity.HasKey(e => e.user_Id)
                    .HasName("PK_acce_tbUsuarios_user_Id");

                entity.ToTable("tbUsuarios", "acce");

                entity.Property(e => e.user_Contrasena).IsRequired();

                entity.Property(e => e.user_Estado)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.user_FechaCreacion)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.user_FechaModificacion).HasColumnType("datetime");

                entity.Property(e => e.user_NombreUsuario)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.HasOne(d => d.role)
                    .WithMany(p => p.tbUsuarios)
                    .HasForeignKey(d => d.role_Id)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbRoles_role_Id");

                entity.HasOne(d => d.user_UsuCreacionNavigation)
                    .WithMany(p => p.Inverseuser_UsuCreacionNavigation)
                    .HasForeignKey(d => d.user_UsuCreacion)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbUsuarios_user_UsuCreacion_user_Id");

                entity.HasOne(d => d.user_UsuModificacionNavigation)
                    .WithMany(p => p.Inverseuser_UsuModificacionNavigation)
                    .HasForeignKey(d => d.user_UsuModificacion)
                    .HasConstraintName("FK_acce_tbUsuarios_acce_tbUsuarios_user_UsuModificacion_user_Id");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}